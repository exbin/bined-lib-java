buildscript {
    repositories {
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
}

plugins {
    id 'base'
    id 'distribution'
    id 'maven-publish'
}

version = '0.2.2-SNAPSHOT'

task cleanDeps {
    if (gradle.startParameter.taskNames.contains("clean") && !project.gradle.startParameter.projectProperties.containsKey("moduleDep")) {
        println "Deleting temporary dependency modules"
        File depsCheckFile = rootProject.file("deps/dependency.txt")
        if (depsCheckFile.exists()) {
            File depsDir = rootProject.file("deps")
            depsDir.listFiles().each() { childFile ->
                if ((childFile.isDirectory() && childFile.name != ".gradle") || childFile.name.endsWith(".zip")) {
                    project.delete(childFile)
                }
            }
        } else {
            throw new Exception('Invalid dependency path')
        }
    }
}

clean.dependsOn cleanDeps

subprojects.each { subproject -> evaluationDependsOn(subproject.path) }

publish.dependsOn {
    project(':modules').subprojects.publish
}

if (file('deps/.downloaded').exists()) {
	file('deps/.downloaded').delete()
    // Performs another build task for new dependency handling
    def depsLevel
    if (project.gradle.startParameter.projectProperties.containsKey('moduleDep')) {
        depsLevel = project.gradle.startParameter.projectProperties['moduleDep'] + 1
    } else {
        depsLevel = 1
        println "Due to dependecy download(s) gradle build must be executed again after finishing"
    }
    def artefactBuild = project.tasks.create([name: "depsRebuild_${depsLevel}", type: GradleBuild])
    artefactBuild.tasks = project.gradle.startParameter.taskNames
    artefactBuild.setDependsOn(project.tasks['assemble'].dependsOn)

    def artefactProjectProperties = artefactBuild.startParameter.projectProperties
    def currentProjectProperties = project.gradle.startParameter.projectProperties
    artefactProjectProperties << currentProjectProperties
    artefactProjectProperties << ['moduleDep': depsLevel]

    // Terminate currently invalid tasks
    // TODO: Fix support for other tasks like distZip
    subprojects.each { subproject ->
        if (subproject.tasks.findByPath('compileJava') != null) {
            subproject.tasks['compileJava'].setEnabled(false)
        }
        if (subproject.tasks.findByPath('compileTestJava') != null) {
            subproject.tasks['compileTestJava'].setEnabled(false)
        }
        if (subproject.tasks.findByPath('javadoc') != null) {
            subproject.tasks['javadoc'].setEnabled(false)
        }
    }

    assemble.dependsOn("depsRebuild_${depsLevel}")
}

if (!project.gradle.startParameter.projectProperties.containsKey("moduleDep")) {
    distributions {
        main {
            contents {
                duplicatesStrategy = 'exclude'

                into('') {
                    from project.rootDir
                    include 'LICENSE-2.0.txt'
                    include 'changes.txt'
                }
                into('') {
                    from 'src/dist'
                    include 'readme.txt'
                    include '*.sh'
                    include '*.bat'
                }

                project(':modules').subprojects.each { p ->
                    p.plugins.withType(JavaPlugin) {
                        into('') {
                            from p.jar
                            include '*'
                            from p.sourceJar
                            include '*'
                            from p.javadocJar
                            include '*'
                        }
                    }
                }

                project(':apps').subprojects.each { p ->
                    p.plugins.withType(JavaPlugin) {
                        into('') {
                            from p.jar
                            include '*'
                            rename { filename -> p.name + ".jar" }
                        }
                        into('') {
                            from p.configurations.runtimeClasspath
                            include '*'
                            from p.sourceJar
                            include '*'
                        }
                    }
                }

                into('doc') {
                    from 'doc'
                    include '**'
                }
                into('resources') {
                    from 'resources'
                    include '**'
                    exclude 'private'
                }
            }
        }
    }
}
