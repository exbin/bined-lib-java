plugins {
    id 'java'
    id 'distribution'
    id 'maven-publish'
    // classpath("net.sf.proguard:proguard-gradle:6.1.1")
}

apply from: '../apps.gradle'

ext.depsRoot = 'BinedJava'

if (!hasProperty('mainClass')) {
    ext.mainClass = 'org.exbin.bined.editor.basic.BinEdEditorBasic'
    ext.appArgs = '-dev'
}

def configureExec(task) {
    task.mainClass = mainClass
    task.classpath = sourceSets.main.runtimeClasspath
    if (hasProperty('appArgs')) {
        task.args appArgs
    }
}

task run(type: JavaExec) {
    task -> configureExec(task)
}

task debug(type: JavaExec) {
    task -> configureExec(task)
    debug = true
}

repositories {
    flatDir {
        dirs "../../lib"
    }
    mavenLocal()
    mavenCentral()
}

dependencies {
    implementation moduleDep('BinedJava', 'org.exbin.bined', 'bined-core')
    implementation moduleDep('BinedJava', 'org.exbin.bined', 'bined-swing')
    implementation moduleDep('BinedJava', 'org.exbin.bined', 'bined-operation')
    implementation moduleDep('BinedJava', 'org.exbin.bined', 'bined-operation-swing')
    implementation moduleDep('ExbinAuxiliaryJava', 'org.exbin.auxiliary', 'paged_data')
    compileOnly group: 'com.google.code.findbugs', name: 'jsr305', version: '3.0.2'

    testImplementation group: 'junit', name: 'junit', version: '4.10'
}

def manifestClassPath() {
    try {
        return (configurations.runtimeClasspath.collect { it.getName() }).join(' ')
    } catch (Exception) {
        return ""
    }
}

jar {
    from configurations.compileClasspath.findAll { it.name == 'bined-core-${version}.jar' }.collect { it.isDirectory() ? it : zipTree(it) }
    from configurations.compileClasspath.findAll { it.name == 'bined-swing-${version}.jar' }.collect { it.isDirectory() ? it : zipTree(it) }
    from configurations.compileClasspath.findAll { it.name == 'bined-operation-swing-${version}.jar' }.collect { it.isDirectory() ? it : zipTree(it) }
    from configurations.compileClasspath.findAll { it.name == 'bined-operation-${version}.jar' }.collect { it.isDirectory() ? it : zipTree(it) }
    from configurations.compileClasspath.findAll { it.name.startsWith('paged_data-${version}') && it.name.endsWith('jar') }.collect { it.isDirectory() ? it : zipTree(it) }
    manifest {
        attributes(
            'Main-Class': mainClass,
            'Class-Path': manifestClassPath()
        )
    }
}

task fatJar(type: Jar) {
    manifest {
        attributes 'Main-Class': mainClass
    }

    archiveBaseName = 'bined-editor-basic-standalone'
    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
    with jar
}

import proguard.gradle.*

// task proguardJar(type: proguard.gradle.ProGuardTask) {
//     libraryjars "${System.properties['java.home']}/jre/lib/rt.jar"
//     injars "build/libs/bined-editor-basic-standalone-${version}.jar"
//     outjars "build/libs/bined-editor-basic-proguard-${version}.jar"
// }
// proguardJar.dependsOn fatJar
