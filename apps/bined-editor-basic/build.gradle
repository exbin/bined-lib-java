buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'net.sf.proguard:proguard-gradle:6.1.1'
        classpath 'net.sf.proguard:proguard-base:6.1.1'
//        classpath 'de.gliderpilot.gradle.jnlp:gradle-jnlp-plugin:+'
    }
}

plugins {
    id 'java'
    id 'distribution'
    // Requires older gradle
//    id("de.gliderpilot.jnlp") version "1.2.6"
}

apply from: '../apps.gradle'

ext.depsRoot = 'BinedLibJava'

if (!hasProperty('mainClass')) {
    ext.mainClass = 'org.exbin.bined.editor.basic.BinEdEditorBasic'
    ext.appArgs = '-dev'
}

def configureExec(task) {
    task.mainClass = mainClass
    task.classpath = sourceSets.main.runtimeClasspath
    if (hasProperty('appArgs')) {
        task.args appArgs
    }
}

task run(type: JavaExec) {
    task -> configureExec(task)
}

task debug(type: JavaExec) {
    task -> configureExec(task)
    debug = true
}

repositories {
    flatDir {
        dirs "../../lib"
    }
    mavenLocal()
    mavenCentral()
}

dependencies {
    implementation moduleDep('BinedLibJava', 'org.exbin.bined', 'modules', 'bined-core')
    implementation moduleDep('BinedLibJava', 'org.exbin.bined', 'modules', 'bined-swing')
    implementation moduleDep('BinedLibJava', 'org.exbin.bined', 'modules', 'bined-operation')
    implementation moduleDep('BinedLibJava', 'org.exbin.bined', 'modules', 'bined-operation-swing')
    implementation moduleDep('ExbinAuxiliaryJava', 'org.exbin.auxiliary', 'modules', 'binary_data')
    implementation moduleDep('ExbinAuxiliaryJava', 'org.exbin.auxiliary', 'modules', 'binary_data-array')
    compileOnly group: 'com.google.code.findbugs', name: 'jsr305', version: '3.0.2'

    testImplementation group: 'junit', name: 'junit', version: '4.13.2'
}

def manifestClassPath() {
    try {
        return (configurations.runtimeClasspath.collect { it.getName() }).join(' ')
    } catch (Exception) {
        return ""
    }
}

jar {
    from configurations.compileClasspath.findAll { it.name == 'bined-core-${version}.jar' }.collect { it.isDirectory() ? it : zipTree(it) }
    from configurations.compileClasspath.findAll { it.name == 'bined-swing-${version}.jar' }.collect { it.isDirectory() ? it : zipTree(it) }
    from configurations.compileClasspath.findAll { it.name == 'bined-operation-swing-${version}.jar' }.collect { it.isDirectory() ? it : zipTree(it) }
    from configurations.compileClasspath.findAll { it.name == 'bined-operation-${version}.jar' }.collect { it.isDirectory() ? it : zipTree(it) }
    from configurations.compileClasspath.findAll { it.name.startsWith('binary_data-${version}') && it.name.endsWith('jar') }.collect { it.isDirectory() ? it : zipTree(it) }
    from configurations.compileClasspath.findAll { it.name.startsWith('binary_data-array-${version}') && it.name.endsWith('jar') }.collect { it.isDirectory() ? it : zipTree(it) }
    manifest {
        attributes(
            'Main-Class': mainClass,
            'Class-Path': manifestClassPath()
        )
    }
}

task fatJar(type: Jar) {
    manifest {
        attributes 'Main-Class': mainClass
    }

    archiveBaseName = 'bined-editor-basic-standalone'
    from { configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) } }
    with jar
}

import proguard.gradle.*

task proguardJar(type: proguard.gradle.ProGuardTask) {
    injars "build/libs/bined-editor-basic-standalone-${version}.jar"
    outjars "build/libs/bined-editor-basic-proguard-${version}.jar"

    // Automatically handle the Java version of this build.
    if (System.getProperty('java.version').startsWith('1.')) {
        // Before Java 9, the runtime classes were packaged in a single jar file.
        libraryjars "${System.getProperty('java.home')}/lib/rt.jar"
    } else {
        // As of Java 9, the runtime classes are packaged in modular jmod files.
        libraryjars "${System.getProperty('java.home')}/jmods/java.base.jmod", jarfilter: '!**.jar', filter: '!module-info.class'
        //libraryjars "${System.getProperty('java.home')}/jmods/....."
    }

    keepclasseswithmembers 'public class ' + mainClass + ' { \
        public static void main(java.lang.String[]); \
    }'
    
    dontwarn 'javax.annotation.**'
    dontobfuscate
    // Comment off use of DefaultCodeAreaCommandHandler in CodeArea constructor for smaller size
}
//proguardJar.dependsOn fatJar

/*
jnlp {
    useVersions = true
    withXml {
        information {
            title project.name
            vendor project.group ?: project.name
        }
        security {
            'all-permissions'()
        }
    }
    // signJarParams = [alias: 'myalias', storepass: 'mystorepass']
}
*/