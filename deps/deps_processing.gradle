// Downloadable dependencies processing

buildscript {
    repositories {
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
}

def fetchModule(String gitProfile, gitRepo, subDir, moduleDir, targetDir) {
    def repoFile = new File("${targetDir}/${gitRepo}.zip")
    if (!repoFile.exists()) {
        def downloadUrl = "https://codeload.github.com/$gitProfile/$gitRepo/zip/refs/heads/master"
        println "Downloading $gitProfile/$gitRepo"
        new URL(downloadUrl).withInputStream{ i -> repoFile.withOutputStream{ it << i }}
    }

    copy {
        from zipTree(repoFile)
    	include "$gitRepo-master/$subDir/$moduleDir/**"
    	includeEmptyDirs = false
        eachFile { fcp ->
            fcp.path = fcp.path.replaceFirst("$gitRepo-master/$subDir/$moduleDir", '')
        }
        into "$targetDir/$moduleDir"
    }
}

// - local maven repository module will be used if available
// - otherwise module will be download to deps directory
project.dependencies.ext.moduleDep = { depsName, packageName, directoryName, moduleName ->
    def depVersion = ext['deps' + depsName].version
    def depGithubProfile = ext['deps' + depsName].githubProfile
    def depGithubRepo = ext['deps' + depsName].githubRepo

    def mavenModuleDir = repositories.mavenLocal().url.path + packageName.replace('.', '/') + '/' + moduleName + '/' + depVersion
    if (new File(mavenModuleDir).isDirectory()) {
        // Use maven package if available
        return "${packageName}:${moduleName}:${depVersion}"
    }

    def depsDir = rootProject.buildDir.parent + '/deps/'
    if (gradle.startParameter.taskNames == ['clean']) {
        return project(':deps')
    }

    def depModuleDir = depsDir + moduleName
    if (!new File(depModuleDir).isDirectory()) {
        fetchModule(depGithubProfile, depGithubRepo, directoryName, moduleName, depsDir)
        
        // Reports new module was downloaded -> need another sweep of dependency resolution
        if (!new File(depsDir + ".downloaded").exists()) {
            new File(depsDir + ".downloaded").createNewFile()
        }
        return project(':deps')
    }

    if (new File(depsDir + ".downloaded").exists()) {
        return project(':deps')
    }

    return project(':deps:' + moduleName)
}

project.dependencies.ext.moduleDepPath = { depsName, directoryName, moduleName ->
    return ":deps:${moduleName}"
}
